{"version":3,"file":"version.js","sources":["../src/version.ts"],"sourcesContent":["import { VersionBump, ConventionalCommit } from './types.js'\nimport semver from 'semver'\n\nconst CONVENTIONAL_COMMIT_TYPES = {\n  feat: 'minor',\n  fix: 'patch',\n  docs: 'none',\n  style: 'none',\n  refactor: 'patch',\n  perf: 'patch',\n  test: 'none',\n  chore: 'none',\n  revert: 'patch',\n  ci: 'none',\n  build: 'none'\n} as const\n\nexport function parseConventionalCommit(message: string): ConventionalCommit {\n  const conventionalCommitRegex =\n    /^(?<type>feat|fix|docs|style|refactor|perf|test|chore|revert|ci|build)(?:\\((?<scope>[^)]+)\\))?(?<breaking>!)?: (?<message>.+)$/\n  const match = message.match(conventionalCommitRegex)\n\n  if (!match) {\n    return {\n      type: 'chore',\n      breaking: false,\n      message,\n      hash: ''\n    }\n  }\n\n  const { type, scope, breaking, message: commitMessage } = match.groups || {}\n  return {\n    type: type || 'chore',\n    scope,\n    breaking: Boolean(breaking),\n    message: commitMessage || message,\n    hash: ''\n  }\n}\n\nexport function determineVersionBump(\n  commits: ConventionalCommit[]\n): VersionBump {\n  let highestBump: VersionBump = 'none'\n\n  for (const commit of commits) {\n    if (commit.breaking) {\n      return 'major'\n    }\n\n    const bump = CONVENTIONAL_COMMIT_TYPES[\n      commit.type as keyof typeof CONVENTIONAL_COMMIT_TYPES\n    ] as VersionBump\n\n    // Update highestBump if the current bump is higher\n    if (\n      bump === 'major' ||\n      (bump === 'minor' && highestBump !== 'major') ||\n      (bump === 'patch' && highestBump === 'none')\n    ) {\n      highestBump = bump\n    }\n  }\n\n  return highestBump\n}\n\nexport function calculateNewVersion(\n  currentVersion: string,\n  bump: VersionBump,\n  isPreRelease: boolean,\n  prereleaseNumber?: number\n): string {\n  const version = semver.parse(currentVersion)\n  if (!version) {\n    throw new Error(`Invalid version: ${currentVersion}`)\n  }\n\n  let newVersion = currentVersion\n  switch (bump) {\n    case 'major':\n      newVersion = `${version.major + 1}.0.0`\n      break\n    case 'minor':\n      newVersion = `${version.major}.${version.minor + 1}.0`\n      break\n    case 'patch':\n      newVersion = `${version.major}.${version.minor}.${version.patch + 1}`\n      break\n    case 'none':\n      // Keep current version\n      break\n  }\n\n  if (isPreRelease) {\n    newVersion = `${newVersion}-rc.${prereleaseNumber || 1}`\n  }\n\n  return newVersion\n}\n\nexport function generateChangelog(commits: ConventionalCommit[]): string {\n  const sections: { [key: string]: string[] } = {\n    '🚀 Features': [],\n    '🐛 Fixes': [],\n    '📝 Documentation': [],\n    '♻️ Refactors': [],\n    '⚡️ Performance': [],\n    '🧪 Tests': [],\n    '🔧 Chores': [],\n    '⏪ Reverts': [],\n    '🔨 Build': [],\n    '👷 CI': []\n  }\n\n  for (const commit of commits) {\n    let section: string\n    switch (commit.type) {\n      case 'feat':\n        section = '🚀 Features'\n        break\n      case 'fix':\n        section = '🐛 Fixes'\n        break\n      case 'docs':\n        section = '📝 Documentation'\n        break\n      case 'refactor':\n        section = '♻️ Refactors'\n        break\n      case 'perf':\n        section = '⚡️ Performance'\n        break\n      case 'test':\n        section = '🧪 Tests'\n        break\n      case 'chore':\n        section = '🔧 Chores'\n        break\n      case 'revert':\n        section = '⏪ Reverts'\n        break\n      case 'build':\n        section = '🔨 Build'\n        break\n      case 'ci':\n        section = '👷 CI'\n        break\n      default:\n        section = '🔧 Chores'\n    }\n\n    const message = commit.breaking\n      ? `**BREAKING CHANGE:** ${commit.message}`\n      : commit.message\n    sections[section].push(`- ${message}`)\n  }\n\n  const changelog = Object.entries(sections)\n    .filter(([, items]) => items.length > 0)\n    .map(([title, items]) => `### ${title}\\n\\n${items.join('\\n')}`)\n    .join('\\n\\n')\n\n  return changelog\n}\n"],"names":[],"mappings":"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"}